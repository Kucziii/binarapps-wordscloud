{"ast":null,"code":"import _initializerDefineProperty from \"/Users/kucziii/Desktop/projects/binarapps-recruitment-wordcloud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/kucziii/Desktop/projects/binarapps-recruitment-wordcloud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/kucziii/Desktop/projects/binarapps-recruitment-wordcloud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;\n\nimport { observable, action } from \"mobx\";\nexport let wordsStore = (_class = (_temp = class wordsStore {\n  constructor() {\n    _initializerDefineProperty(this, \"isLoading\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"competitions\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"getCompetitions\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"clearStore\", _descriptor4, this);\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"isLoading\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"competitions\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"getCompetitions\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      this.isLoading = true;\n      this.competitions = [];\n\n      try {\n        const data = await API.get(apiRoutes.COMPETITIONS);\n        this.competitons = this.competitions.push(...data.data);\n      } catch (e) {\n        // eslint-disable-next-line\n        console.log(e);\n      } finally {\n        this.isLoading = false;\n      }\n    };\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"clearStore\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      this.isLoading = false;\n      this.competitions = [];\n    };\n  }\n})), _class);\nexport default new wordsStore();","map":{"version":3,"sources":["/Users/kucziii/Desktop/projects/binarapps-recruitment-wordcloud/src/stores/wordsStore.js"],"names":["observable","action","wordsStore","isLoading","competitions","data","API","get","apiRoutes","COMPETITIONS","competitons","push","e","console","log"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,MAArB,QAAmC,MAAnC;AAEA,WAAaC,UAAb,sBAAO,MAAMA,UAAN,CAAiB;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA,CAAxB,mFACGF,UADH;AAAA;AAAA;AAAA;AAAA;AAAA,WAC0B,KAD1B;AAAA;AAAA,gFAGGA,UAHH;AAAA;AAAA;AAAA;AAAA;AAAA,WAG6B,EAH7B;AAAA;AAAA,mFAKGC,MALH;AAAA;AAAA;AAAA;AAAA;AAAA,WAK4B,YAAY;AACpC,WAAKE,SAAL,GAAiB,IAAjB;AACA,WAAKC,YAAL,GAAoB,EAApB;;AACA,UAAI;AACF,cAAMC,IAAI,GAAG,MAAMC,GAAG,CAACC,GAAJ,CAAQC,SAAS,CAACC,YAAlB,CAAnB;AACA,aAAKC,WAAL,GAAmB,KAAKN,YAAL,CAAkBO,IAAlB,CAAuB,GAAGN,IAAI,CAACA,IAA/B,CAAnB;AACD,OAHD,CAGE,OAAOO,CAAP,EAAU;AACV;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD,OAND,SAMU;AACR,aAAKT,SAAL,GAAiB,KAAjB;AACD;AACF,KAjBH;AAAA;AAAA,8EAmBGF,MAnBH;AAAA;AAAA;AAAA;AAAA;AAAA,WAmBuB,YAAY;AAC/B,WAAKE,SAAL,GAAiB,KAAjB;AACA,WAAKC,YAAL,GAAoB,EAApB;AACD,KAtBH;AAAA;AAAA;AAyBA,eAAe,IAAIF,UAAJ,EAAf","sourcesContent":["import { observable, action } from \"mobx\";\n\nexport class wordsStore {\n  @observable isLoading = false;\n\n  @observable competitions = [];\n\n  @action getCompetitions = async () => {\n    this.isLoading = true;\n    this.competitions = [];\n    try {\n      const data = await API.get(apiRoutes.COMPETITIONS);\n      this.competitons = this.competitions.push(...data.data);\n    } catch (e) {\n      // eslint-disable-next-line\n      console.log(e);\n    } finally {\n      this.isLoading = false;\n    }\n  };\n\n  @action clearStore = async () => {\n    this.isLoading = false;\n    this.competitions = [];\n  };\n}\n\nexport default new wordsStore();\n"]},"metadata":{},"sourceType":"module"}