{"ast":null,"code":"import _initializerDefineProperty from \"/Users/kucziii/Desktop/projects/binarapps-recruitment-wordcloud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/kucziii/Desktop/projects/binarapps-recruitment-wordcloud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/kucziii/Desktop/projects/binarapps-recruitment-wordcloud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;\n\nimport { observable, action } from \"mobx\";\nexport let wordsStore = (_class = (_temp = class wordsStore {\n  constructor() {\n    _initializerDefineProperty(this, \"isLoading\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"wordsResponse\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"getCompetitions\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"clearStore\", _descriptor4, this);\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"isLoading\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"wordsResponse\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [{\n      question: \"select animals\",\n      all_words: [\"hole\", \"sofa\", \"pear\", \"tiger\", \"oatmeal\", \"square\", \"nut\", \"cub\", \"shirt\", \"tub\", \"passenger\", \"cow\"],\n      good_words: [\"tiger\", \"cow\"]\n    }, {\n      question: \"select colors\",\n      all_words: [\"jeans\", \"existence\", \"ink\", \"red\", \"blue\", \"yellow\", \"laugh\", \"behavior\", \"expansion\", \"white\", \"black\", \"cakes\"],\n      good_words: [\"red\", \"blue\", \"yellow\", \"white\", \"black\"]\n    }, {\n      question: \"select vehicles\",\n      all_words: [\"belief\", \"wire\", \"car\", \"bus\", \"star\", \"river\", \"hat\", \"skirt\", \"train\"],\n      good_words: [\"car\", \"bus\", \"train\"]\n    }];\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"getCompetitions\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      this.isLoading = true;\n      this.competitions = [];\n\n      try {\n        const data = await API.get(apiRoutes.COMPETITIONS);\n        this.competitons = this.competitions.push(...data.data);\n      } catch (e) {\n        // eslint-disable-next-line\n        console.log(e);\n      } finally {\n        this.isLoading = false;\n      }\n    };\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"clearStore\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      this.isLoading = false;\n      this.competitions = [];\n    };\n  }\n})), _class);\nexport default new wordsStore();","map":{"version":3,"sources":["/Users/kucziii/Desktop/projects/binarapps-recruitment-wordcloud/src/stores/wordsStore.js"],"names":["observable","action","wordsStore","question","all_words","good_words","isLoading","competitions","data","API","get","apiRoutes","COMPETITIONS","competitons","push","e","console","log"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,MAArB,QAAmC,MAAnC;AAEA,WAAaC,UAAb,sBAAO,MAAMA,UAAN,CAAiB;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA,CAAxB,mFACGF,UADH;AAAA;AAAA;AAAA;AAAA;AAAA,WAC0B,KAD1B;AAAA;AAAA,iFAGGA,UAHH;AAAA;AAAA;AAAA;AAAA;AAAA,WAG8B,CAC1B;AACEG,MAAAA,QAAQ,EAAE,gBADZ;AAEEC,MAAAA,SAAS,EAAE,CACT,MADS,EAET,MAFS,EAGT,MAHS,EAIT,OAJS,EAKT,SALS,EAMT,QANS,EAOT,KAPS,EAQT,KARS,EAST,OATS,EAUT,KAVS,EAWT,WAXS,EAYT,KAZS,CAFb;AAgBEC,MAAAA,UAAU,EAAE,CAAC,OAAD,EAAU,KAAV;AAhBd,KAD0B,EAmB1B;AACEF,MAAAA,QAAQ,EAAE,eADZ;AAEEC,MAAAA,SAAS,EAAE,CACT,OADS,EAET,WAFS,EAGT,KAHS,EAIT,KAJS,EAKT,MALS,EAMT,QANS,EAOT,OAPS,EAQT,UARS,EAST,WATS,EAUT,OAVS,EAWT,OAXS,EAYT,OAZS,CAFb;AAgBEC,MAAAA,UAAU,EAAE,CAAC,KAAD,EAAQ,MAAR,EAAgB,QAAhB,EAA0B,OAA1B,EAAmC,OAAnC;AAhBd,KAnB0B,EAqC1B;AACEF,MAAAA,QAAQ,EAAE,iBADZ;AAEEC,MAAAA,SAAS,EAAE,CACT,QADS,EAET,MAFS,EAGT,KAHS,EAIT,KAJS,EAKT,MALS,EAMT,OANS,EAOT,KAPS,EAQT,OARS,EAST,OATS,CAFb;AAaEC,MAAAA,UAAU,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,OAAf;AAbd,KArC0B,CAH9B;AAAA;AAAA,mFAyDGJ,MAzDH;AAAA;AAAA;AAAA;AAAA;AAAA,WAyD4B,YAAY;AACpC,WAAKK,SAAL,GAAiB,IAAjB;AACA,WAAKC,YAAL,GAAoB,EAApB;;AACA,UAAI;AACF,cAAMC,IAAI,GAAG,MAAMC,GAAG,CAACC,GAAJ,CAAQC,SAAS,CAACC,YAAlB,CAAnB;AACA,aAAKC,WAAL,GAAmB,KAAKN,YAAL,CAAkBO,IAAlB,CAAuB,GAAGN,IAAI,CAACA,IAA/B,CAAnB;AACD,OAHD,CAGE,OAAOO,CAAP,EAAU;AACV;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD,OAND,SAMU;AACR,aAAKT,SAAL,GAAiB,KAAjB;AACD;AACF,KArEH;AAAA;AAAA,8EAuEGL,MAvEH;AAAA;AAAA;AAAA;AAAA;AAAA,WAuEuB,YAAY;AAC/B,WAAKK,SAAL,GAAiB,KAAjB;AACA,WAAKC,YAAL,GAAoB,EAApB;AACD,KA1EH;AAAA;AAAA;AA6EA,eAAe,IAAIL,UAAJ,EAAf","sourcesContent":["import { observable, action } from \"mobx\";\n\nexport class wordsStore {\n  @observable isLoading = false;\n\n  @observable wordsResponse = [\n    {\n      question: \"select animals\",\n      all_words: [\n        \"hole\",\n        \"sofa\",\n        \"pear\",\n        \"tiger\",\n        \"oatmeal\",\n        \"square\",\n        \"nut\",\n        \"cub\",\n        \"shirt\",\n        \"tub\",\n        \"passenger\",\n        \"cow\"\n      ],\n      good_words: [\"tiger\", \"cow\"]\n    },\n    {\n      question: \"select colors\",\n      all_words: [\n        \"jeans\",\n        \"existence\",\n        \"ink\",\n        \"red\",\n        \"blue\",\n        \"yellow\",\n        \"laugh\",\n        \"behavior\",\n        \"expansion\",\n        \"white\",\n        \"black\",\n        \"cakes\"\n      ],\n      good_words: [\"red\", \"blue\", \"yellow\", \"white\", \"black\"]\n    },\n    {\n      question: \"select vehicles\",\n      all_words: [\n        \"belief\",\n        \"wire\",\n        \"car\",\n        \"bus\",\n        \"star\",\n        \"river\",\n        \"hat\",\n        \"skirt\",\n        \"train\"\n      ],\n      good_words: [\"car\", \"bus\", \"train\"]\n    }\n  ];\n\n  @action getCompetitions = async () => {\n    this.isLoading = true;\n    this.competitions = [];\n    try {\n      const data = await API.get(apiRoutes.COMPETITIONS);\n      this.competitons = this.competitions.push(...data.data);\n    } catch (e) {\n      // eslint-disable-next-line\n      console.log(e);\n    } finally {\n      this.isLoading = false;\n    }\n  };\n\n  @action clearStore = async () => {\n    this.isLoading = false;\n    this.competitions = [];\n  };\n}\n\nexport default new wordsStore();\n"]},"metadata":{},"sourceType":"module"}